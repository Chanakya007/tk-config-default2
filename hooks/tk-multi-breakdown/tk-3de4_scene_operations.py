# Copyright (c) 2013 Shotgun Software Inc.
#
# CONFIDENTIAL AND PROPRIETARY
#
# This work is provided "AS IS" and subject to the Shotgun Pipeline Toolkit
# Source Code License included in this distribution package. See LICENSE.
# By accessing, using, copying or modifying this work you indicate your
# agreement to the Shotgun Pipeline Toolkit Source Code License. All rights
# not expressly granted therein are reserved by Shotgun Software Inc.

import os
import tde4

import sgtk

HookBaseClass = sgtk.get_hook_baseclass()


class BreakdownSceneOperations(HookBaseClass):
    """
    Breakdown operations for 3dequalizer.

    This implementation handles detection of 3de camera footage.
    """

    def scan_scene(self):
        """
        The scan scene method is executed once at startup and its purpose is
        to analyze the current scene and return a list of references that are
        to be potentially operated on.

        The return data structure is a list of dictionaries. Each scene reference
        that is returned should be represented by a dictionary with three keys:

        - "node": The name of the 'node' that is to be operated on. Most DCCs have
          a concept of a node, path or some other way to address a particular
          object in the scene.
        - "type": The object type that this is. This is later passed to the
          update method so that it knows how to handle the object.
        - "path": Path on disk to the referenced object.

        Toolkit will scan the list of items, see if any of the objects matches
        any templates and try to determine if there is a more recent version
        available. Any such versions are then displayed in the UI as out of date.

        """
        reads = []

        # let's look at the camera nodes
        for camera_id in tde4.getCameraList():
            path = tde4.getCameraPath(camera_id)
            name = tde4.getCameraName(camera_id)
            reads.append({"node": name, "type": "camera", "path": path})

        # also at 3D models in all point groups:
        for pgroup_id in tde4.getPGroupList():
            for model_id in tde4.get3DModelList(pgroup_id):
                path = tde4.get3DModelFilepath(pgroup_id, model_id)
                name = tde4.get3DModelName(pgroup_id, model_id)
                # internal 3D objects (eg. cube, sphere) will not have a path
                if path:
                    # there is no find_model_by_name as of 3de r6.b2
                    reads.append({"node": (name, pgroup_id, model_id), "type": "model", "path": path})

        return reads

    def update(self, items):
        """
        Perform replacements given a number of scene items passed from the app.

        Once a selection has been performed in the main UI and the user clicks
        the update button, this method is called.

        The items parameter is a list of dictionaries on the same form as was
        generated by the scan_scene hook above. The path key now holds
        the that each node should be updated *to* rather than the current path.
        """
        engine = self.parent.engine

        for i in items:
            node_id = i["node"]
            node_type = i["type"]
            new_path = i["path"]

            if node_type == "camera":
                engine.log_debug("Footage for camera %s: Updating to version %s" % (node_id, new_path))
                camera_id = tde4.findCameraByName(node_id)
                tde4.setCameraPath(camera_id, new_path)

            elif node_type == "model":
                engine.log_debug("OBJ file for model %s: Updating to version %s" % (node_id, new_path))
                name, pgroup_id, model_id = node_id
                tde4.importOBJ3DModel(pgroup_id, model_id, new_path)
