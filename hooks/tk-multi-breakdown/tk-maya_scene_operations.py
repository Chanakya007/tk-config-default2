# Copyright (c) 2013 Shotgun Software Inc.
#
# CONFIDENTIAL AND PROPRIETARY
#
# This work is provided "AS IS" and subject to the Shotgun Pipeline Toolkit
# Source Code License included in this distribution package. See LICENSE.
# By accessing, using, copying or modifying this work you indicate your
# agreement to the Shotgun Pipeline Toolkit Source Code License. All rights
# not expressly granted therein are reserved by Shotgun Software Inc.

import maya.cmds as cmds
import pymel.core as pm
import sgtk

HookBaseClass = sgtk.get_hook_baseclass()

class BreakdownSceneOperations(HookBaseClass):
    """
    Breakdown operations for Maya.

    This implementation handles detection of maya references and file texture nodes.
    """

    def update(self, items):
        """
        Perform replacements given a number of scene items passed from the app.

        Once a selection has been performed in the main UI and the user clicks
        the update button, this method is called.

        The items parameter is a list of dictionaries on the same form as was
        generated by the scan_scene hook above. The path key now holds
        the that each node should be updated *to* rather than the current path.
        """

        engine = self.parent.engine
        app_object = engine.apps["tk-multi-breakdown"]

        for i in items:

            node = i["node"]
            node_type = i["type"]
            new_path = i["path"]

            if node_type == "reference":
                # maya reference
                engine.log_debug("Maya Reference %s: Updating to version %s" % (node, new_path))
                rn = pm.system.FileReference(node)
                rn.replaceWith(new_path)

            elif node_type == "file":
                # file texture node
                engine.log_debug("File Texture %s: Updating to version %s" % (node, new_path))

                tex_type = "SINGLE_TEXTURE"
                tex_mode = cmds.getAttr("%s.uvTilingMode" % node)
                # update texture as UDIM if tex_mode == 3
                if tex_mode == 3:
                    tex_type = "UDIM"
                    new_path = new_path.replace('%04d','<UDIM>')

                # update texture as image sequence if "Use image Sequence is on"
                if cmds.getAttr("%s.useFrameExtension" % node):
                    tex_type = "IMG_SEQ"
                    new_path = new_path.replace('%04d', '<f>')

                # update texture if it is single texture
                if tex_type == "SINGLE_TEXTURE":
                    # get texture template object
                    tex_template_obj = self.get_template_object(app_object, node)
                    old_texture = cmds.getAttr("%s.fileTextureName" % node)

                    old_texture_fields = tex_template_obj.get_fields(old_texture)
                    new_texture_fields = tex_template_obj.get_fields(new_path)
                    new_path = new_path.replace(str(new_texture_fields['SEQ']), str(old_texture_fields['SEQ']))

                cmds.setAttr("%s.fileTextureName" % node, new_path, type="string")

    def get_template_object(self, app_object, node_name):
        for tex in app_object.analyze_scene():
            if tex['node_name'] == node_name:
             return tex["template"]
